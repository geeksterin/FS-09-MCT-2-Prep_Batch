Check Rotation in matrix----------------------------------------------
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
       Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] arr = new int[n][n];
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                arr[i][j]=sc.nextInt();
            }
        }
        
        String str ="";
        for(int i=0; i<n; i++){
            str+=arr[0][i];
        }
        str=str+str;//123123
        
        for(int i=0; i<n; i++){
            String curr="";
            for(int j=0; j<n; j++){
                curr+=arr[i][j];//321
            }
            
            if(str.indexOf(curr)==-1){
                System.out.println("NO");
                return;
            }
        }
        
         System.out.println("YES");
        
    }
}










N Queens-------------------------------------------
import java.io.*;
import java.util.*;

public class Solution {
    
// 0 1 0 0
// 0 0 0 1
// 1 0 0 0
// 0 0 1 0
    
    public static String checkNQueen(int[][] arr, int r, int c){// r=2, c=0
        int n = arr.length;
        
        //North (upside)
        for(int i=r-1; i>=0; i--){
            if(arr[i][c]==1)
                return "Danger";
        }
        
        //South (downside)
        for(int i=r+1; i<n; i++){
            if(arr[i][c]==1)
                return "Danger";
        }
        
        
        //East (Righside of row)
        for(int i=c+1; i<n; i++){
            if(arr[r][i]==1)
                return "Danger";
        }
        
        
        //West (Left side of row)
        for(int i=c-1; i>=0; i--){
            if(arr[r][i]==1)
                return "Danger";
        }
        
        
        //NorthEast (Right upwards)
        for(int i=r-1, j=c+1; j<n && i>=0; i--,j++){
            if(arr[i][j]==1)
                return "Danger";
        }
        
        
        //NorthWest (Left upwards)
         for(int i=r-1, j=c-1; j>=0 && i>=0; i--,j--){
            if(arr[i][j]==1)
                return "Danger";
        }
        
        
        //SouthEast (Right downwards)
         for(int i=r+1, j=c+1; j<n && i<n; i++,j++){
            if(arr[i][j]==1)
                return "Danger";
        }
        
        
        
        //SouthWest (Left downwards)
         for(int i=r+1, j=c-1; j>=0 && i<n; i++,j--){
            if(arr[i][j]==1)
                return "Danger";
        }
        
        return "N Queens";
        
    }

    public static void main(String[] args) {
         Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] arr = new int[n][n];
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                arr[i][j]=sc.nextInt();
            }
        }
        
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
               if(arr[i][j]==1){// checking for queen
                   System.out.print(checkNQueen(arr, i , j));
                   return;
               }
            }
        }
        
    }
}




Cross Word------------------------------------------------
import java.io.*;
import java.util.*;

public class Solution {
    
    public static boolean isWordPresent(char[][] arr, int r, int c, String word){
        int n = arr.length;
        String curr = "";
        
      
        //South (downside)
        for(int i=r; i<n; i++){
            curr = curr + arr[i][c];
            if(curr.equals(word)){
                return true;
            }
        }
        
        
        // East (Rightside)
        curr = "";
        for(int i=c; i<n; i++){
            curr = curr + arr[r][i];
            if(curr.equals(word)){
                return true;
            }
        }
        
        // SouthEast (Rightside Downwards)
        curr = "";
        for(int i=r+1, j=c; i<n && j<n; i++, j++){
            curr = curr + arr[i][j];
            if(curr.equals(word)){
                return true;
            }
        }

        // SouthWest (Leftside Downwards)
        curr = "";
        for(int i=r+1, j=c; i<n && j>=0; i++, j--){
            curr = curr + arr[i][j];
            if(curr.equals(word)){
                return true;
            }
        }
        
        return false;
       
        
    }
    
    
    public static boolean crossWord(char[][] arr, String word){
        int n = arr.length;
         for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
               if(isWordPresent(arr, i, j, word)){
                   return true;
               }
            }
        }
        return false;
    }

    public static void main(String[] args) {
       Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        char[][] arr = new char[n][n];
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                arr[i][j]=sc.next().charAt(0);
            }
        }
        
        String word = sc.next();
        boolean ans = crossWord(arr, word);
        System.out.println(ans);
        
        
       
    }
}







Count All palindromic rows----------------------------------------
import java.io.*;
import java.util.*;

public class Solution {
    
    public static boolean isPalindrome(int[] arr){
        int n = arr.length;
        int i=0;int j=n-1;
        while(i<j){
            if(arr[i] != arr[j]){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }

    public static void main(String[] args) {
         Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] arr = new int[n][m];
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                arr[i][j]=sc.nextInt();
            }
        }
        
        int count=0;
        for(int i=0; i<n; i++){
            if(isPalindrome(arr[i])){
                count++;
            }
        }
        
        System.out.print(count);
    }
}




Search in sorted array-------------------------------
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] arr = new int[n][m];
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                arr[i][j]=sc.nextInt();
            }
        }
        int ele = sc.nextInt();
        
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(arr[i][j]==ele){
                    System.out.print(i+"\n"+j);
                    return;
                }
            }
        }
        
        System.out.print("Not Found");
    }
}

Leetcode----
public boolean searchMatrix(int[][] matrix, int target) {
        
        if(matrix.length==0 || matrix[0].length==0)return false;
        
        int n=matrix.length;
        int m=matrix[0].length;
        int si=0;
        int ei=n*m-1;
        while(si<=ei){ 
        int mid=(si+ei)/2;
        int val=matrix[mid/m][mid%m];
        
            if(val==target)return true;
            else if(val<target)si=mid+1;
            else ei=mid-1;
        }
        return false;   
    }
    
    
    
    
    Is Equal-------------------------------------------
      import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
       Scanner sc = new Scanner(System.in);
        String s1= sc.next();
        String s2= sc.next();
        
        for(int i=0; i<s1.length(); i++){
            if(s1.charAt(i) != s2.charAt(i)){
                System.out.print("false");
                return;
            }
        }
         System.out.print("true");
    }
}
